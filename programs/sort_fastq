#!/bin/bash

set -e

VERSION=0.0.1

tmpFile=tmp.func.$$.sh
funcUrl='https://raw.githubusercontent.com/fortune9/programs/master/bash_functions.sh'

wget --quiet -O $tmpFile $funcUrl

if [[ -f $tmpFile ]]; then
	source $tmpFile
	rm $tmpFile
else
	msg "Can't reach file 'bash_functions.sh' from github"
	exit 2;
fi

## functions
function usage()
{
	cat <<EOF
$0 [options] <fastq.gz>

This program sorts fastq reads according to their read names, by
wrapping the Linux 'sort' command. The input file can be in plain
format or gzipped.

Options (default values are in []):

-o|--outfile: <path> the file to store sorted results [/dev/stdout].

--sort-opt: <string> options to the Linux 'sort' command, put in
quotes, such as "-g -T ./"

--version: print out version number

Example uses:
# default sort
$0 test1.fq.gz | gzip -c >test1.sorted.fq.gz

# sort according to numeric values and use current folder as temporary
# folder
$0 --sort-opt '-n -T .' test1.fq.gz | gzip -c >test1.sorted.fq.gz


EOF

}

if [[ $# -lt 1 ]]; then
	usage;
	exit 1;
fi

posArgs=();
outFile=/dev/stdout
sortOpts="";

while [[ $# -gt 0 ]];
do
	k=$1;
	shift;
	case $k in
		-h|--help)
			usage;
			exit 1;
			;;
		-o|--outfile)
			outFile=$1;
			shift;
			;;
		--sort-opt)
			sortOpts=$1;
			shift;
			;;
        -v|--version)
            echo $VERSION;
            exit 0;
            ;;
		*)
			posArgs+=($k);
			;;
	esac

done

#echo ${posArgs[@]}

if [[ ${#posArgs[@]} -lt 1 ]]; then
	usage;
	exit 1;
fi

inFile=${posArgs[0]}

msg "Start sorting '$inFile'"

#less $inFile | gawk \
#'/^@/{r=$0;i=0; while(i<3) {getline newline; r=r "|" newline; i++;} print r}' \

reader="";

if [[ $inFile =~ \.gz ]]; then
	warn "Input file '$inFile' is detected in gzipped format"
	reader="gzip -dc"
else
	warn "Input file '$inFile' is processed in plain format"
	reader="cat"
fi

$reader $inFile | paste -d'|' - - - - \
	| LC_ALL=C sort $sortOpts -k 1,1 -t " " | tr '|' '\n' >$outFile

msg "Job is done at `date`"

exit 0;

